
---
entity 3종류 

1. key entity: 회원, 고객, 상품 같은 일반적 메인 엔티티
2. action entity: key entity의 관계속에서 만들어지는 엔티티. ex. 회원 -> VIP. 
3. main entity: action entity 중에서 중요한 역할을 하는 놈. ex. 키 엔티티인 고객, 상품을 FK로 받은 구매 엔티티.



---
entity 정할 때 주의점


A. 관리 범위 설정 
해당 엔티티가 관리하는 데이터의 범위가 어디까진가인지 명확화 하는 작업을 해야한다.


그냥 상품으로 퉁쳐도 되는지,
직원용상품, 고객용 상품, 삭제 상품 등 상품 내 여러 종류로 분할해서 관리하는지,
상황에 맞게 판단 잘 해야한다.





B. 
엔티티 naming 주의점 

어짜피 복수를 뜻하니까 LIST, 목록은 이름에서 빼는게 좋다.
INFORMATION, 정보도 그 단어 안에 특정하는 의미가 없으므로 뺴는게 좋다.
ex. 사원정보 < 사원 


네이밍 지을 땐, 
1. 먼저 어느 범위를 이 엔티티가 관리할지 생각한 후,
2. 해당 범위만 정확하게 추상화 하는 단어를 선별하는게 핵심인 듯?




---
attributes 주의점1: 정규화, 반정규화 


atomic 해야한다.
그렇다고, 상황 봐가면서 atomic 해야한다.

주소 하나로 퉁칠건지,
동,시,읍,아파트 주소 등으로 잘게 쪼갤껀지,

이름 하나로 퉁칠건지,
영어 이름까지 포함시킬건지,
middle name도 포함시킬 건지 


다 atomic하게 쪼갤 순 있다.(normalize)
하지만, 너무 atomic하게 쪼개면, 나중에 join할 때 성능 피본다.
따라서 atomic하게 일단 쪼갠 후,(normalize)
자주 쓰는 애들은 다시 반정규화 시켜주는게 좋다. 성능 때문에.





---
attributes 주의점2: naming convention 


이름을 주소라고 지으면, 사무실 주소인지 자택주소인지 모른다.
CREATED_AT 인 경우가 많은데, 무든 등록일인지 모른다.

entity 주의점에서도 말했듯, naming은 추상화인데, 해당 엔티티 || 어트리뷰트가 포함하는 범위를 초과하지도 뺴지도 않은 알잘딱 추상화 이름을 고르는게 핵심.

이런 표준단어를 고민해서 용어집에 먼저 인터페이스마냥 정의해놓고 진행하는 것.




