

---
관계의 기수성(0,1,N)


1. zero one
2. zero n
3. one only 
    ex. 학생(필수정보) -> 신체정보(선택정보). 선택정보 null로 텅텅 비게해서 메모리 공간 낭비보단, 선택정보는 입력한 사람 것만 따로 관리하고 나중에 join해주는게 좋다. 
4. one n 
    (대부분의 경우 one n 관계다. 대부분 부모 하나가 자식 여럿을 소유하는 관계. M:N관계가 있어도 중간에 매핑 엔티티 써서 1:M으로 해소시켜준다.)
5. n n
    ex. 제품-제조업체. 한 제조업체에서 여러 제품 생산 가능하고, 랩탑이면 랩탑 입장에서 삼성에서 만들수도, 애플에서 만들수도 있으니까. 랩탑 만드는 회사가 여러개 있을 수 있으니까. 
    Q. 그럼 회원 0 주문은 왜 n n 관계가 아닌겨? -> A. 주문은 unique한 uuid 있잖아. 특정 회원에 종속되는. 그래서 1이지. 
    대부분 m:m 관계는 논리식에 표기법도 없고 해서 서로 소속관계도 없으니까, 중간에 매핑 테이블(엔티티) 하나 만들어서 1:m 관계로 치환한다. (mm관계해소.vuerd.json 참조)


---
어떻게 해석?

ex1.
회원 1 -> 0,n 주문 이라면,

1은 부모, 포함하는 주체.
N은 자식, 소속되는 피주체.
자식은 부모의 pk를 fk로써 받아감.


회원이 부모로써 여러 주문을 포함할 수 있다.
따라서 회원이 1인 부모, 주문이 자식인 M. 1:M인 관계.



ex2.
학생 -> 수강과목(ex. 이산수학, 운영체제)의 cardinality는 1:N인가?

Q. 어? 근데 한 수강과목을 여러 학생이 들을 수 있으니까, M:M이 되야하는거 아냐?
1:N인지 N:M인지 구분 어떻게 해? 해깔려.
-> M:N 맞음. 근데 중간 매핑 테이블로 해소해서 1:M로 되는 것.

어떻게 판단?

A1. 각자의 입장, 역할에 빙의(?) 하면 된다.
학생에 입장에서 봤을 때, 여러 수강과목 신청할 수 있어. 그럼 N은 맞지? 이건 쉬움.

ex.

철수 -> 이산수학
철수 -> 운영체제
철수 -> 컴퓨터 구조

이렇게 한 학생이 려서 과목 선택 할 수 있으니까, 
그래서 학생 입장에서 수강과목은 N이 된다.


그리고 반대로 수강과목 입장에서 생각했을 때,
그 과목이 여러 학생을 포함하잖아?


이산수학 -> 철수
이산수학 -> 영희
이산수학 -> 길동


그래서 수강과목 입장에서도 학생은 M임.

따라서 학생:수강과목은 M:N인 관계.

근데 M:M 관계 해소해서 중간에 매핑 엔티티 만들어서, 1:M 인 관계로 치환하겠지.




ex3. 이래도 해깔려. 어떻게 구분해?

직접 테이블을 작성해서, 한개가 몇개와 매핑되는지 봐봐.

relation_01N판별_example.vuerd.json 참조.



---
실선 vs 점선

실선 = 식별관계 
점선 = 비식별관계


식별 관계란, 부모의 식별자가 자식 엔티티의 레코드 식별하는데 꼭 필요하면 식별관계.
ex. 게시판 -> 게시물의 게시판아이디(FK로 받는데 PK가 됨)은 식별관계 

비식별관계란, 부모 엔티티의 식별자가 없어도 자식 엔티티의 레코드가 생성될 수 있을 때.
ex. 유저 -> 게시물의 작성자 아이디(FK로 받지만 PK가 되진 않음)는 비식별관계.


아 그래서 vuerd에서 부모 pk를 자식한테 그냥 가져오기만 하면 점선인데,
자식 엔티티에서 저걸 pk로 지정하는 순간 실선으로 바뀌는거였구나!

이 앱 쓰면 자동처리해주네 개꿀~ 