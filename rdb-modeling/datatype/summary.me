
---
A. pk 선택 기준

다른 테이블에서 받는 fk들이 막 3~4개 되는데 얘들로 pk만들면,
1. 이 엔티티 자식또한 저 pk들 다 상속받아야 함 -> pk 비대화 
2. pk를 인덱스에서 관리하는데, 인덱스 크기도 커짐

따라서, fk들 여러개로 복합키 만드는 것 보다, uuid로 고유 pk만드는게 더 좋다.


또한, composite키 쓸꺼면, WHERE절에 자주 사용되는 pk의 서순을 먼저 둬라. 
이유는 ../mysql/index/ 참조.




---
B. datatype 선택 기준


Q. VARCHAR(10)이나 VARCHAR(100)이나 필요한 만큼 공간 사용하는데, 왜 VARCHAR(10)씀? 넉넉하게 100쓰지?

A. 레코드 수가 적으면 상관없는데, 1억건 이상 많아지면 메모리 차이 크게 남. 1byte * 1억 = 100MB의 메모리 공간. 이게 한 컬럼만 해당임.
그래서 MYSQL DATA_TYPE보면 숫자도 INT, INTEGER, FLOAT 종류별로 데이터 사이즈에 따라, 용도에 따라 구분되있으니까, 적절한거 골라 쓰자.

---
C. column length 선택 기준


이름은 VARCHAR2(40)으로 쓰자는 관례적으로 쓰이는 크기는, 여러 프로젝트 봐서 참조하자.
가끔 21억은 부족하지 않을까? 해서 INTEGER말고 42억까지 쓸 수 있는 BIGINT 쓰는 경우도 있는데, 앞으로 어떤 변화가 올지 모르니까.


---
D. chracter-set 선택 기준


charset마다 문자당 byte차지수가 다르다.
UTF_8은 문자당 1~3 byte 차지한다.

MYSQL서버의 default-cahracter-set으로 하나의 charset으로 핸들링하는게 편하다.



---
E. why null 보단 not null?

null을 저장하던, not null한 후 빈 문자열 저장하던, 디스크 공간상 차이는 없음.

SELECT에 WHERE절로 사용되는 컬럼이면 NOT NULL로 해주는게 옵티마이저가 더 좋은 실행계획 선택하게 도와준다.
NOT NULL로 선택하면 저장되는 값 1~2byte가 희생되나, 디스크 공간 절약을 포기하면서라도 query 속도에서 얻는 이점이 있다.

왜냐면 NULL이 저장된 컬럼에 내부적으로 query시 IN(sub query) 쓰는데, 이게 비효율적 이기 때문.