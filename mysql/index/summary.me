

---
what is index?


인덱스는 해당 엔티티를 full-scan하면 시간걸리니까, 나중에 꺼내기 쉽게 미리 어떤 기준을 가지고 SORT한 앤데,
그 기준이 A라고 하면, SELECT * FROM TABLE WHERE A라고 하면, 이미 sort되어있는 인덱스 타고 바로 꺼내올 수 있으니까.


예를들어, pk도 인덱스거든?
pk잡으면 해당 엔티티를 pk가 키값이 되어 밸류값은 pk의 row address가 됨.
그래서 where절 조검검색에 pk값 쓰면 좋은게, 이미 pk 먹인 엔티티는 pk기준으로 인덱스에 정렬되있으니까, 해당 pk 인덱스 타고 query하는 것.



Q. 그럼 모든 엔티티에 인덱스 생성하면 좋겠네?

그렇지만도 않은게,

인덱스도 엔티티처럼 오브젝트라 관리해줘야해서, 디비 메모리 잡아먹음.
100만 row 데이터 인덱스 만드려면, 특정 기준에서 sort되었다고 해도 100만 row일거아냐. 


그리고 100만개 로우 데이터를 빨리 찾기 위해서, 키워드 뽑아서 인덱스 천개 만들어서, 내가 찾는 키워드가 저 인덱스에 있는지 보고, 저 인덱스가 가르키는 페이지인 79만번째에 바로 가면, 최대 천번 뒤져야 하잖아?
근데 100만개 로우 데이터에 인덱스를 1대1로 다 붙여서 100만개면, 의미가 없어지잖아?
그래서 인덱스는 전체 db 데이터의 10~15%가 가장 optimal하다고 함. 


Q. 그럼 언제 index를 먹임?
모델링한거 기반으로 백엔드에서 query 작성했을거아냐?
근데 그 중에서, 게시판 메인 1페이지라던지,
where절이 포함된 쿼리중에서 검색 빈도가 잦은 애가 있을거아냐?
그 where절 검색 조건을 index로 먹여.


단, 주의점이, 게시판 엔티티에 인덱스를 먹인다고 했을 때,
게시판 엔티티가 자주 글이 올라오고(create), 수정되고(update) 하잖아?
이럴 때 마다, 미리 정렬해놨던 인덱스를 재정렬해야하거든? sort됬던걸 다시 sort해야하니까.

그 엔티티(게시판)에 인덱스를 많이 붙일수록, 
select query 속도는 좋아질 순 있으나,
게시판 엔티티의 update, insert의 퍼포먼스가 떨어짐.


Q. where절 조건이나 composite key중에서, 서순 


1. where절에서 equal조건으로 많이 쓰이는 컬럼이 앞으로 오면 효율적    
2. 분별력이 높은 컬럼이 앞에 오면 효율적
    ex. 성별은 1/2토막 밖에 안내줘서 거즘 full-range-scan의 절반 성능임. 안좋음. id같이 분별력 높은 애가 앞에 와야지 바로 인덱스 스캔해서 찾을 수 있음. 왜냐면 숫자면 0~9 10가지 경우의 수를 자릿수마다 비교하며 가니까, 자릿수 비교마다 1/10토막씩 나뉘는 거니까. 알파벳이어도 a-z까지 26분의 1씩 계속 나누는 거니까. 
3. PRIMARY KEY(firstname, lastname) 인 경우에, lastname은 firstname 기준으로 정렬된거라, 독자적 index로 안쳐줌. 
    다른 쿼리에서 ex. select * from user where lastname = 'cho' 해도, 저 복합키 인덱스 안씀. 
    따라서 add index key(lastname) 해줘야 함.
    Q. 그럼 key(firstname, lastname) 이랑, key(lastname) 있는 상황에서, query where firstname="doohwan" 하면, 어느 index 쓸까? A. key(firstname, lastname) 쓴다.




---
인덱스 손익 분기점


인덱스 탄다고 무조건 속도가 빨라지는게 아니라,
테이블이 가진 전체 데이터 양의 10~15% 내의 데이터가 출력될 때에만 인덱스 타면 효율적인데,
그 이상이 될 땐, 오히려 full-range-scan 이 더 빠르다.



---
인덱스 키의 종류 4가지
1. primary key -> PK설정하면, 그 pk기준으로 해당 엔티티가 소팅되어 보관됨. 그래서 pk를 찾을 땐 인덱스로 찾지 않음.
2. unique key -> 테이블에 1개밖에 없는 
    얘도 pk처럼 조건에 걸면, 딱 한개찾고 끝나서 쿼리 속도 빠르다. 
3. key -> 일반 index 
    Q. 검색시 WHERE절에 pk로 검색하는거랑, 그냥 일반 인덱스 key()로 검색하는거랑 뭔차이야?
    pk는 unique하지?
    그래서 원하는 로우 하나 찾으면 실행계획이 끝남 -> 빠름

    근데 일반 인덱스는 ex. key(firstname) 중복이 있지?
    firstname이 'Hofman'인 사람이 100만 로우 디비에 100명이 있다면, 첫번째 Hofman 찾아도, 인덱스 나머지 부분 마저 다 봐야하잖아 그래서 pk 절 서치보다 더 느림.

    그리고 기본적으로 테이블 자체가 pk로 정렬되있는게 default라, pk로 찾는게 제일 좋다.
4. fulltext



---
인덱스로 만들어야 하는 컬럼 


1. where절에서 비교하는 컬럼 
2. order by로 정렬하는 컬럼 
3. group by로 그룹화 하는 컬럼

주의점
1. 인덱스로 설정한 컬럼이, 해당 엔티티의 20% 이상 밖에 구분 못지어주면, 만들지마.
    예를들어, gender을 인덱스로 만들면 반틈밖에 구분 못하잖아? 이건 인덱스 타고 들어가는게 full-scan 때리느니만 못함. 일을 두번하잖아.
    다른 예시로, 반이 3개있는걸 인덱스로 잡지마. 어짜피 33%밖에 커버 못하잖아.



---
인덱스 고려한 쿼리 방법

1. 인덱스 컬럼 사용
    ex. WHERE SUBSTR(ORDER_NO, 1, 4) = '2019'    ---->    WHERE ORDER_NO LIKE '2019%'
2. 인덱스 컬럼의 묵시적 형변환(같은 타입으로 비교해야 함)
    ex. WHERE REG_DATE = '20190730'    ---->   WHERE REG_DATE = TO_DATE('20190730', 'YYYYMMDD')
3. 인덱스 컬럼 부정형 비교
    ex. WHERE MEM_TYPE != '10'   ---->     WHERE MEM_TYPE IN ('20','30')
4. LIKE 연산자 사용 시 %가 앞에 위치
5. OR 조건 사용 -> UNION ALL로 대체



---
세부사항1. Date 조건 검색

그냥 쌩 where birth_date between '1960-01-01' and '1960-12-31'  qhek, 
birth_date같은 컬럼을 index 먹이고, between 연산 다음과 같이 쓰면,
full-scan 안하고 birth_date 인덱스 이용한 range scan 하기에 더 빨라진다.

왜 빨라짐?
birth_date 기준으로 오름차순 정렬 이미 해놨으니까.
